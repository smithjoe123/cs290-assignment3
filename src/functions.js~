/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction()
{
	return null;
}

//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
console.log(typeof doubleArray)
bar =  function( doubleArray)
{

	for (var i = 0; i < doubleArray.length; i++)
	{

		if (typeof doubleArray[i] != "number")
		{
			return false;
		}

		//console.log(doubleArray[i]);
		console.log("i is: ", doubleArray.length);

		doubleArray[i] = 2 * doubleArray[i];

		if (doubleArray[i] == NaN)
		{

			return false;
		
		}

		

	}

	return true;

}

//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
var parseGit;

parseGit = function(logArray)
{


	var arrayGitLog = [];



	for (var i = 0; i < logArray.length; i++)
	{

		var split = logArray[i].split(" ");

		var date1;
		var myDateTemp;
		var myDate = new Date(date1);
		var message1;

		

		for(var i = 0; i < split.length; i++)
		{

			if (i === 0)
			{

				hash1 = split[0];

			}

			else if( i > 0 && i < 7)
			{

				myDateTemp = myDateTemp + split[i];

				if (i < 6)
				{

					myDateTemp = myDateTemp + " ";

				}

			}

			else if (i >= 7)
			{

	

				

				message1 = message1 + split[i];

				if (i < split.length - 2 )
				{
			
					message1 = message1 + " ";

				}

				

			}

		}

			 	

		message1 = message1.slice(1, message1.length-1);

		
		
		arrayGitLog.push({
			hash: hash1,
      			date: myDate,
       			 
       			message: message1
   		 });

		
		

		//var gitLog1 = new GitLog(hash1, date1, message1);

		//arrayGitLog.push(gitLog1);


	}



	return arrayGitLog;

	//string.split("\n")



}

//end your code
